on:
  pull_request:
    branches:
    - main
  workflow_dispatch:
    
jobs:
  test-flask:
    runs-on: windows-latest
    defaults: 
      run:
        working-directory: './server'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with: 
          python-version: '3.11'
      - name: Install requirements
        run: pip install -r requirements.txt
      - name: run unit test
        run: python test_app.py
        env:
          SERVICE_ACCOUNT_KEY: ${{ secrets.FIREBASE_KEY }}
          GMAPS_KEY: ${{ secrets.GMAPS_KEY }}
      - name: echo workspace
        run: echo $GITHUB_WORKSPACE
        shell: bash
  test-frontend-build:
    runs-on: windows-latest
    defaults: 
      run:
        working-directory: './frontend'
    steps:
      - uses: actions/checkout@v3
      - name: set up nodejs
        uses: actions/setup-node@v1
        with:
          node-version: 18.x
      - uses: actions/cache@v2 # This action caches the node_modules folder across builds, and makes the Runner use the cache as long as package-lock.json doesnâ€™t change.
        with:
        # Next.js stores its cache in the .next/cache directory. This will persist the cache across builds for faster application rebuilds. E.g., if I only updated my codebase but not the dependencies, this avoids re-bundling the dependencies.
          path: |
            ${{ github.workspace }}/node_modules
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache. 
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}
      - name: install dependencies
        run: npm install 
      - name: create env variables
        run: |
          touch .env.local
          echo NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=${{ secrets.GMAPS_KEY }} >> .env.local
          echo NEXT_PUBLIC_MAPS_ID=${{ secrets.MAPS_ID }} >> .env.local
          echo NEXT_PUBLIC_FIREBASE_CONFIG=${{ secrets.FIREBASE_CONFIG }} >> .env.local
      - name: Build
        run: npm run build
      - name: echo workspace
        run: echo $GITHUB_WORKSPACE
        shell: bash
        
        
