run-name: ${{ github.actor }} deployed app
on:
  push:
    branches:
    - main
  workflow_dispatch:

    
jobs:
  test-server:
    runs-on: windows-latest
    defaults: 
      run:
        working-directory: './server'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with: 
          python-version: '3.11'
      - name: Install requirements
        run: pip install -r requirements.txt
      - name: run unit test
        run: python test_app.py
        env:
          SERVICE_ACCOUNT_KEY: ${{ secrets.FIREBASE_KEY }}
          GMAPS_KEY: ${{ secrets.GMAPS_KEY }}
      - name: echo workspace
        run: echo $GITHUB_WORKSPACE
        shell: bash

  deploy-server:
    # only run if test is successful
    needs: 
      - test-server
    runs-on: windows-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1.1.1
        with:
          workload_identity_provider: 'projects/262102611503/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
          service_account: 'nav-e-387904@appspot.gserviceaccount.com'
          project_id: 'nav-e-387904'
      - name: Deploy server to App Engine
        uses: google-github-actions/deploy-appengine@v1.2.7
        with:
          project_id: 'nav-e-387904'
          working_directory: './server'
          deliverables: './api.yaml'
          env_vars: |-
            SERVICE_ACCOUNT_KEY=${{ secrets.FIREBASE_KEY }}
            GMAPS_KEY=${{ secrets.GMAPS_KEY }}
      
  build-frontend:
    runs-on: windows-latest
    defaults: 
      run:
        working-directory: './frontend'
    steps: 
      - name: set up nodejs
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - uses: actions/cache@v2 # This action caches the node_modules folder across builds, and makes the Runner use the cache as long as package-lock.json doesnâ€™t change.
        with:
        # Next.js stores its cache in the .next/cache directory. This will persist the cache across builds for faster application rebuilds. E.g., if I only updated my codebase but not the dependencies, this avoids re-bundling the dependencies.
          path: |
            ${{ github.workspace }}/node_modules
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache. 
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}
      - name: install dependencies
        run: npm install --legacy-peer-deps
      - name: create env variables
        run: |
          touch .env.local
          echo NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=${{ secrets.GMAPS_KEY }} >> .env.local
          echo NEXT_PUBLIC_MAPS_ID=${{ secrets.MAPS_ID }} >> .env.local
      - name: build
        run: npm run build

  deploy-frontend:
    needs:
      - build-frontend
    runs-on: windows-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Deploy Frontend to App Engine
        uses: google-github-actions/deploy-appengine@v1.2.7
        with:
          project_id: 'nav-e-387904'
          working_directory: './frontend'
          # env_vars: |-
          #   NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=${{ secrets.GMAPS_KEY }}
          #   NEXT_PUBLIC_MAPS_ID=${{ secrets.MAPS_ID }}


      
      
    
      
    
  
